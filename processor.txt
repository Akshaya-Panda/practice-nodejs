var Promise = require('bluebird')
const os = require('os')
const isWsl = require('is-wsl')

var logger = require('../../util/logger')
var wire = require('../../wire')
var wirerouter = require('../../wire/router')
var wireutil = require('../../wire/util')
var db = require('../../db')
var dbapi = require('../../db/api')
var lifecycle = require('../../util/lifecycle')
var srv = require('../../util/srv')
var zmqutil = require('../../util/zmqutil')
var itmsSync = require('../../util/itms')
var deviceUptimeSync = require('../../util/deviceUptimeSync')
var hubctl = require('../../util/hubctl')
var adbUtil = require('../../util/adbutil')
var geocoder = require('../../util/geocoder')
var qxdm = require('../../util/qxdm')
const scheduler = require('../../util/scheduler')
const gpsutil = require('../../util/gpsutil')

const isWindows = isWsl || os.platform() === 'win32'

module.exports = db.ensureConnectivity(function (options) {
  var log = logger.createLogger('processor')

  geocoder.setApiOptions(options.mapboxApiUrl, options.mapboxApiKey)
  geocoder.setProviderName(options.providerName)

  qxdm.setDomainName(options.appUrl)

  if (options.name) {
    logger.setGlobalIdentifier(options.name)
  }

  scheduler.startAllSchedules()
var appDealer = zmqutil.socket('dealer')
  Promise.map(options.endpoints.appDealer, function (endpoint) {
    return srv.resolve(endpoint).then(function (records) {
      return srv.attempt(records, function (record) {
        log.info('App dealer connected to "%s"', record.url)
        appDealer.connect(record.url)
        return Promise.resolve(true)
      })
    })
  })
    .catch(function (err) {
      log.fatal('Unable to connect to app dealer endpoint', err)
      lifecycle.fatal()
    })

  // Device side
  var devDealer = zmqutil.socket('dealer')

  appDealer.on('message', function (channel, data) {
    devDealer.send([channel, data])
  })

  Promise.map(options.dasUsers, (dasUser) => {
    return dbapi.updateUserPrivilege(dasUser, 'admin')
  }
  ).catch(function (err) {
    log.error('unable to update users privlage')
  })


  Promise.map(options.endpoints.devDealer, function (endpoint) {
    return srv.resolve(endpoint).then(function (records) {
      return srv.attempt(records, function (record) {
        log.info('Device dealer connected to "%s"', record.url)
        devDealer.connect(record.url)
        return Promise.resolve(true)
      })
    })
  })
    .catch(function (err) {
      log.fatal('Unable to connect to dev dealer endpoint', err)
      lifecycle.fatal()
    })

  devDealer.on('message', wirerouter()
    .on(wire.UpdateAccessTokenMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.DeleteUserMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.DeviceChangeMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.UserChangeMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.GroupChangeMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.DeviceGroupChangeMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.GroupUserChangeMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    // Initial device message
    .on(wire.DeviceIntroductionMessage, function (channel, message) {
      setTimeout(() => {
        devDealer.send([
          wireutil.global
          , wireutil.envelope(new wire.isDetachedModeCaptureingDevice(
            message.serial
          ))
        ])
      }, 8000)

      hubctl.checkDevicesConnectedOnhubctl(message.provider.hosturl).then(hubctldata => {

        dbapi.updateHubctlData(hubctldata)
      }).catch(function (err) {
        log.error(
          'Unable to save hubcrl data "%s"'
          , message.serial
          , err
        )
      })
      try {
        itmsSync.saveDeviceInitialState(options, message.serial, message)
        deviceUptimeSync.deviceUpforUse(message.serial, message)
      } catch (err) {
        log.error(err.message)
      }
      dbapi.saveDeviceInitialState(message.serial, message)
        .then(function (device) {
          devDealer.send([
            message.provider.channel
            , wireutil.envelope(new wire.DeviceRegisteredMessage(
              message.serial
            ))
          ])


          appDealer.send([
            channel
            , wireutil.envelope(new wire.DeviceIntroductionMessage(
              message.serial
              , message.status
              , new wire.ProviderMessage(
                message.provider.channel
                , message.provider.name
                , message.provider.hosturl
                , message.provider.hostport
              )
              , new wire.DeviceGroupMessage(
                device.group.id
                , device.group.name
                , new wire.DeviceGroupOwnerMessage(
                  device.group.owner.email
                  , device.group.owner.name
                )
                , new wire.DeviceGroupLifetimeMessage(
                  device.group.lifeTime.start.getTime()
                  , device.group.lifeTime.stop.getTime()
                )
                , device.group.class
                , device.group.repetitions
                , device.group.originName
              )
            ))
          ])
        })
        .catch(function (err) {
          log.error(
            'Unable to save the initial state of Device "%s"'
            , message.serial
            , err.stack
          )
        })
    })
    // Workerless messages
    .on(wire.DevicePresentMessage, function (channel, message, data) {
      itmsSync.setDevicePresent(options, message.serial)
      dbapi.setDevicePresent(message.serial)
      appDealer.send([channel, data])


    })
    .on(wire.DeviceAbsentMessage, function (channel, message, data) {
      try {
        itmsSync.setDeviceAbsent(options, message.serial)
        dbapi.setDeviceAbsent(message.serial)
        deviceUptimeSync.setDeviceDown(message.serial)
      } catch (error) {
        log.error(error.message)
      }
      appDealer.send([channel, data])
    })
    .on(wire.DeviceStatusMessage, function (channel, message, data) {
      dbapi.saveDeviceStatus(message.serial, message.status)
      appDealer.send([channel, data])
    })
    .on(wire.DeviceHeartbeatMessage, function (channel, message, data) {
      try { deviceUptimeSync.heartbeatMessage() } catch (err) {

      }
      appDealer.send([channel, data])
    })

    // Worker initialized
    .on(wire.DeviceReadyMessage, function (channel, message, data) {
      itmsSync.setDeviceReady(options, message.serial, message.channel)

      if (isWindows) {
        qxdm.verifyDevice(message.serial)
          .then(function (device) {
            log.info("Device %s QXDM capability", message.serial, device.result)
            // log.info("Device %s QXDM mask files", message.serial, device.maskFiles)
            dbapi.setDeviceQXDMCapability(message.serial, device.result, device.maskFiles)
          })
          .catch(function (error) {
            log.error(error)
          })
      }
dbapi.setDeviceReady(message.serial, message.channel)
        .then(function () {
          devDealer.send([
            message.channel
            , wireutil.envelope(new wire.ProbeMessage())
          ])

          appDealer.send([channel, data])
        })
    })
    .on(wire.callEventStatus, function (channel, data) {
      var serial = data.serial
      dbapi.callEventChangeMessage(serial, data)
    })
    // Worker messages
    .on(wire.JoinGroupByAdbFingerprintMessage, function (channel, message) {
      dbapi.lookupUserByAdbFingerprint(message.fingerprint)
        .then(function (user) {
          if (user) {
            devDealer.send([
              channel
              , wireutil.envelope(new wire.AutoGroupMessage(
                new wire.OwnerMessage(
                  user.email
                  , user.name
                  , user.group
                )
                , message.fingerprint
              ))
            ])
          }
          else if (message.currentGroup) {
            appDealer.send([
              message.currentGroup
              , wireutil.envelope(new wire.JoinGroupByAdbFingerprintMessage(
                message.serial
                , message.fingerprint
                , message.comment
              ))
            ])
          }
        })
        .catch(function (err) {
          log.error(
            'Unable to lookup user by ADB fingerprint "%s"'
            , message.fingerprint
            , err.stack
          )
        })
    })
    .on(wire.JoinGroupByVncAuthResponseMessage, function (channel, message) {
      dbapi.lookupUserByVncAuthResponse(message.response, message.serial)
        .then(function (user) {
          if (user) {
            devDealer.send([
              channel
              , wireutil.envelope(new wire.AutoGroupMessage(
                new wire.OwnerMessage(
                  user.email
                  , user.name
                  , user.group
                )
                , message.response
              ))
            ])
          }
          else if (message.currentGroup) {
            appDealer.send([
              message.currentGroup
              , wireutil.envelope(new wire.JoinGroupByVncAuthResponseMessage(
                message.serial
                , message.response
              ))
            ])
          }
})
        .catch(function (err) {
          log.error(
            'Unable to lookup user by VNC auth response "%s"'
            , message.response
            , err.stack
          )
        })
    })
    .on(wire.ConnectStartedMessage, function (channel, message, data) {
      dbapi.setDeviceConnectUrl(message.serial, message.url)
      appDealer.send([channel, data])
    })
    .on(wire.ConnectStoppedMessage, function (channel, message, data) {
      dbapi.unsetDeviceConnectUrl(message.serial)
      appDealer.send([channel, data])
    })
    .on(wire.JoinGroupMessage, function (channel, message, data) {
      itmsSync.setDeviceOwner(options, message.serial, message.owner, message.usage)
      dbapi.setDeviceOwner(message.serial, message.owner)
      if (message.usage) {
        dbapi.setDeviceUsage(message.serial, message.usage)
      }
      appDealer.send([channel, data])
    })
    .on(wire.LeaveGroupMessage, function (channel, message, data) {
      dbapi.unsetDeviceOwner(message.serial, message.owner)
      dbapi.unsetDeviceUsage(message.serial)
      itmsSync.unsetDeviceUsage(options, message.serial)

      appDealer.send([channel, data])
    })
    .on(wire.DeviceLogMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.DeviceIdentityMessage, async function (channel, message, data) {
      dbapi.saveDeviceIdentity(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.TransactionProgressMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.TransactionDoneMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.GetServerLocationMessage, async function (channel, message, data) {
      const coordinates = await gpsutil.getLocation(message.serial)
      devDealer.send([
        channel
        , wireutil.envelope(new wire.ServerLocationResultMessage(
          message.serial,
          coordinates.latitude || "",
          coordinates.longitude || "",
        ))
      ])
    })
    .on(wire.StopGpsUtilMessage, function (channel, message, data) {
      gpsutil.stop(message.serial)
      appDealer.send([channel, data])
    })
    .on(wire.DeviceLogcatEntryMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.TestAssistBugReportStatusMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.QxdmLogResultMessage, function (channel, message, data) {
      if (message.success) {
        dbapi.saveEndQxdmLog(message.serial, message)
      }
      appDealer.send([channel, data])
    })
    .on(wire.QxdmStatusMessage, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.AirplaneModeEvent, function (channel, message, data) {
      dbapi.setDeviceAirplaneMode(message.serial, message.enabled)
      appDealer.send([channel, data])
    })
    .on(wire.BatteryEvent, function (channel, message, data) {
      dbapi.setDeviceBattery(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.DeviceBrowserMessage, function (channel, message, data) {
      dbapi.setDeviceBrowser(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.ConnectivityEvent, function (channel, message, data) {
      dbapi.setDeviceConnectivity(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.PhoneStateEvent, function (channel, message, data) {
      dbapi.setDevicePhoneState(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.detachmodelogginDeviceAdded, function (channel, message, data) {
      appDealer.send([channel, data])
    })
    .on(wire.RotationEvent, function (channel, message, data) {
      dbapi.setDeviceRotation(message.serial, message.rotation)
      appDealer.send([channel, data])
    })
    .on(wire.LocationEvent, function (channel, message, data) {
      dbapi.setDeviceLocation(message.serial, message)
      appDealer.send([channel, data])
    })
    .on(wire.DynamicObject, function (channel, message, data) {
      dbapi.setCellNetworkInfo(message.serial, message)
      let parsedMessage = {}
      if (message.properties.length > 0) {
        for (let i = 0; i < message.properties.length; i++) {
          parsedMessage[message.properties[i].key] = message.properties[i].string_value
        }
      }
      dbapi.setCellNetworkInfoIntoDevices(message.serial, parsedMessage)
      appDealer.send([channel, data])
    })
    .on(wire.CpuInfo, function (channel, message, data) {
      dbapi.setDeviceCpuInfo(message.serial, message)
      appDealer.send([channel, data])
    })
  
    .on(wire.ReverseForwardsEvent, function (channel, message, data) {
      dbapi.setDeviceReverseForwards(message.serial, message.forwards)
      appDealer.send([channel, data])
    })
    .handler())

  lifecycle.observe(function () {
    [appDealer, devDealer].forEach(function (sock) {
      try {
        sock.close()
      }
      catch (err) {
        // No-op
      }
    })
  })
})
